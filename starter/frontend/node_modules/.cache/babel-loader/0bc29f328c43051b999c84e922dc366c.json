{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\reema\\\\Desktop\\\\02_trivia_api\\\\starter\\\\frontend\\\\src\\\\components\\\\QuestionView.js\";\nimport React, { Component } from 'react';\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass QuestionView extends Component {\n  constructor() {\n    super();\n\n    this.getQuestions = () => {\n      $.ajax({\n        url: `/questions?page=${this.state.page}`,\n        //TODO: update request URL\n        type: \"GET\",\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            categories: result.categories,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.getByCategory = id => {\n      $.ajax({\n        url: `/categories/${id}/questions`,\n        //TODO: update request URL\n        type: \"GET\",\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.submitSearch = searchTerm => {\n      $.ajax({\n        url: `/questions`,\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          searchTerm: searchTerm\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.questionAction = id => action => {\n      if (action === 'DELETE') {\n        if (window.confirm('are you sure you want to delete the question?')) {\n          $.ajax({\n            url: `/questions/${id}`,\n            //TODO: update request URL\n            type: \"DELETE\",\n            success: result => {\n              this.getQuestions();\n            },\n            error: error => {\n              alert('Unable to load questions. Please try your request again');\n              return;\n            }\n          });\n        }\n      }\n    };\n\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: {},\n      currentCategory: null\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  selectPage(num) {\n    this.setState({\n      page: num\n    }, () => this.getQuestions());\n    this.state.page = num; // set the state to reflect currently selected page\n  }\n\n  createPagination() {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10);\n\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push( /*#__PURE__*/React.createElement(\"span\", {\n        key: i,\n        className: `page-num ${i === this.state.page ? 'active' : ''}`,\n        onClick: () => {\n          this.selectPage(i);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }\n      }, i));\n    }\n\n    return pageNumbers;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question-view\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"categories-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      onClick: () => {\n        this.getQuestions();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }\n    }, \"Categories\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }\n    }, Object.keys(this.state.categories).map(id => /*#__PURE__*/React.createElement(\"li\", {\n      key: id,\n      onClick: () => {\n        this.getByCategory(id);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 29\n      }\n    }, this.state.categories[id], /*#__PURE__*/React.createElement(\"img\", {\n      className: \"category\",\n      src: `${this.state.categories[id]}.svg`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 33\n      }\n    })))), /*#__PURE__*/React.createElement(Search, {\n      submitSearch: this.submitSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"questions-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }\n    }, \"Questions\"), this.state.questions.map((q, ind) => /*#__PURE__*/React.createElement(Question, {\n      key: q.id,\n      question: q.question,\n      answer: q.answer,\n      category: this.state.categories[q.category],\n      difficulty: q.difficulty,\n      questionAction: this.questionAction(q.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pagination-menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }\n    }, this.createPagination())));\n  }\n\n}\n\nexport default QuestionView;","map":{"version":3,"sources":["C:/Users/reema/Desktop/02_trivia_api/starter/frontend/src/components/QuestionView.js"],"names":["React","Component","Question","Search","$","QuestionView","constructor","getQuestions","ajax","url","state","page","type","success","result","setState","questions","totalQuestions","total_questions","categories","currentCategory","current_category","error","alert","getByCategory","id","submitSearch","searchTerm","dataType","contentType","data","JSON","stringify","xhrFields","withCredentials","crossDomain","questionAction","action","window","confirm","componentDidMount","selectPage","num","createPagination","pageNumbers","maxPage","Math","ceil","i","push","render","Object","keys","map","q","ind","question","answer","category","difficulty"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass QuestionView extends Component {\n    constructor() {\n        super();\n        this.state = {\n            questions: [],\n            page: 1,\n            totalQuestions: 0,\n            categories: {},\n            currentCategory: null,\n        }\n    }\n\n    componentDidMount() {\n        this.getQuestions();\n    }\n\n    getQuestions = () => {\n        $.ajax({\n            url: `/questions?page=${this.state.page}`, //TODO: update request URL\n            type: \"GET\",\n            success: (result) => {\n                this.setState({\n                    questions: result.questions,\n                    totalQuestions: result.total_questions,\n                    categories: result.categories,\n                    currentCategory: result.current_category\n                })\n                return;\n            },\n            error: (error) => {\n                alert('Unable to load questions. Please try your request again')\n                return;\n            }\n        })\n    }\n\n    selectPage(num) {\n        this.setState({ page: num }, () => this.getQuestions());\n        this.state.page = num; // set the state to reflect currently selected page\n    }\n\n    createPagination() {\n        let pageNumbers = [];\n        let maxPage = Math.ceil(this.state.totalQuestions / 10)\n        for (let i = 1; i <= maxPage; i++) {\n            pageNumbers.push(\n                <span\n                    key={i}\n                    className={`page-num ${i === this.state.page ? 'active' : ''}`}\n                    onClick={() => { this.selectPage(i) }}>{i}\n                </span>)\n        }\n        return pageNumbers;\n    }\n\n    getByCategory = (id) => {\n        $.ajax({\n            url: `/categories/${id}/questions`, //TODO: update request URL\n            type: \"GET\",\n            success: (result) => {\n                this.setState({\n                    questions: result.questions,\n                    totalQuestions: result.total_questions,\n                    currentCategory: result.current_category\n                })\n                return;\n            },\n            error: (error) => {\n                alert('Unable to load questions. Please try your request again')\n                return;\n            }\n        })\n    }\n\n    submitSearch = (searchTerm) => {\n        $.ajax({\n            url: `/questions`, //TODO: update request URL\n            type: \"POST\",\n            dataType: 'json',\n            contentType: 'application/json',\n            data: JSON.stringify({ searchTerm: searchTerm }),\n            xhrFields: {\n                withCredentials: true\n            },\n            crossDomain: true,\n            success: (result) => {\n                this.setState({\n                    questions: result.questions,\n                    totalQuestions: result.total_questions,\n                    currentCategory: result.current_category\n                })\n                return;\n            },\n            error: (error) => {\n                alert('Unable to load questions. Please try your request again')\n                return;\n            }\n        })\n    }\n\n    questionAction = (id) => (action) => {\n        if (action === 'DELETE') {\n            if (window.confirm('are you sure you want to delete the question?')) {\n                $.ajax({\n                    url: `/questions/${id}`, //TODO: update request URL\n                    type: \"DELETE\",\n                    success: (result) => {\n                        this.getQuestions();\n                    },\n                    error: (error) => {\n                        alert('Unable to load questions. Please try your request again')\n                        return;\n                    }\n                })\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"question-view\">\n                <div className=\"categories-list\">\n                    <h2 onClick={() => { this.getQuestions() }}>Categories</h2>\n                    <ul>\n                        {Object.keys(this.state.categories).map((id, ) => (\n                            <li key={id} onClick={() => { this.getByCategory(id) }}>\n                                {this.state.categories[id]}\n                                <img className=\"category\" src={`${this.state.categories[id]}.svg`} />\n                            </li>\n                        ))}\n                    </ul>\n                    <Search submitSearch={this.submitSearch} />\n                </div>\n                <div className=\"questions-list\">\n                    <h2>Questions</h2>\n                    {this.state.questions.map((q, ind) => (\n                        <Question\n                            key={q.id}\n                            question={q.question}\n                            answer={q.answer}\n                            category={this.state.categories[q.category]}\n                            difficulty={q.difficulty}\n                            questionAction={this.questionAction(q.id)}\n                        />\n                    ))}\n                    <div className=\"pagination-menu\">\n                        {this.createPagination()}\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default QuestionView;\n"]},"metadata":{},"sourceType":"module"}